<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小马哥</title>
  
  <subtitle>因为到过地狱才知道天堂的美好</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursiteoi.com/"/>
  <updated>2019-12-27T06:11:17.281Z</updated>
  <id>http://yoursiteoi.com/</id>
  
  <author>
    <name>2m雨天</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>05列表元组数字</title>
    <link href="http://yoursiteoi.com/2019/12/27/05%E5%88%97%E8%A1%A8%E5%85%83%E7%BB%84%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursiteoi.com/2019/12/27/05%E5%88%97%E8%A1%A8%E5%85%83%E7%BB%84%E6%95%B0%E5%AD%97/</id>
    <published>2019-12-27T06:11:17.156Z</published>
    <updated>2019-12-27T06:11:17.281Z</updated>
    
    <content type="html"><![CDATA[<p>#一.列表的相关的操作<br>##1列表的运算：<br>###1数学运算：加法，减法，乘法,除法。<br>1.加法：产生一个新的列表，新的列表中的元素是两个元素的合并。<br>2.乘法运算：列表中的元素重复N次，产生一个新的列表。<br>3.比较运算<br>比较两个列表是否相等。<br>a.==，比较列表是否相等，这个是位置，类型都是相等的。<br>b.is  判断两个列表是否相等。<br>这个主要是判断地址是否相等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num=[<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>]</span><br><span class="line">num2=num</span><br><span class="line">print(num2 <span class="keyword">is</span> num)</span><br></pre></td></tr></table></figure><p>4.in  not in 的用法<br>元素 in 列表  判断列表中是否存在指定的元素。<br>元素 not in 列表 判断列表中是否存在指定的元素。<br>5.相关的函数<br>len(序列)—获取序列的长度（元素的个数）<br>print(len(“hello”))–5<br>max/min——求最大的值，最小值<br>注意：最大值，最小值的使用，序列中的所有的元素的类型一致，而且元素本身能够支持比较大小的操作。<br>如果你不会这种函数的情况下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">0</span></span><br><span class="line">scors=[<span class="number">23</span>,<span class="number">24</span>,<span class="number">45</span>,<span class="number">67</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> scors:</span><br><span class="line">  <span class="keyword">if</span> i&gt;x:</span><br><span class="line">  x=i</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><p>用这种方法，你也是可以求出最大值的，最小值也是可以同样的道理来求值。<br>（6）list（数据），将指定的数据转换成列表，<strong>数据必须是序列</strong>（所有的序列都是可以转换成列表的）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span>（list(<span class="string">"hello"</span>)）</span><br><span class="line">print(list(<span class="string">"12345678967"</span>))</span><br><span class="line">[<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>]</span><br></pre></td></tr></table></figure><p>#二.列表相关的的方法<br>1.列表.count(元素)#统计列表中指定的个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">names=[<span class="string">"曹操"</span>,<span class="string">"刘备"</span>,<span class="string">"赵云"</span>,<span class="string">"小乔"</span>,<span class="string">"貂蝉"</span>,<span class="string">"司马懿"</span>,<span class="string">"小乔"</span>,<span class="string">"大乔"</span>,<span class="string">"张飞"</span>,<span class="string">"张飞"</span>,<span class="string">"关羽"</span>,<span class="string">"张飞"</span>,<span class="string">"张飞"</span>]</span><br><span class="line">print(names.count(<span class="string">"张飞"</span>))</span><br><span class="line"></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>2.列表.extend(序列)，将这个里面的所有的添加到这个里面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">names=[<span class="string">"曹操"</span>,<span class="string">"刘备"</span>,<span class="string">"赵云"</span>,<span class="string">"小乔"</span>,<span class="string">"貂蝉"</span>,<span class="string">"司马懿"</span>,<span class="string">"小乔"</span>,<span class="string">"大乔"</span>,<span class="string">"张飞"</span>,<span class="string">"张飞"</span>,<span class="string">"关羽"</span>,<span class="string">"张飞"</span>,<span class="string">"张飞"</span>]</span><br><span class="line">names.extend(<span class="string">"12345"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="string">'曹操'</span>, <span class="string">'刘备'</span>, <span class="string">'赵云'</span>, <span class="string">'小乔'</span>, <span class="string">'貂蝉'</span>, <span class="string">'司马懿'</span>, <span class="string">'小乔'</span>, <span class="string">'大乔'</span>, <span class="string">'张飞'</span>, <span class="string">'张飞'</span>, <span class="string">'关羽'</span>, <span class="string">'张飞'</span>, <span class="string">'张飞'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>]</span><br></pre></td></tr></table></figure><p>3.列表.index（元素）–获取指定元素在列表中的下标。<br>a.如果元素不存在，会报错。<br>b.多个元素只取第一个的下标。<br>4.列表.reverse（）—-将原来的列表倒转过来，不会产生新的，新的用切片。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nums=[<span class="number">1</span>,<span class="number">9</span>,<span class="number">3</span>]</span><br><span class="line">nums.reverse()</span><br><span class="line">print(nums)</span><br><span class="line"></span><br><span class="line">[<span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>(5).列表.clear()—–清空列表，一般用clear.而不是直接赋值为空。<br>注意：如果直接为空的效率没有用这个clear的效率高。<br>（6）列表的复制：<br>a.列表.copy（）复制列表中的元素，产生一个新的列表，将新的内存地址返回，赋值后两个不影响。<br><img src="https://upload-images.jianshu.io/upload_images/4956968-e527f9810b422468.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="copy内存的变化.png"></p><p>b.列表[:]这也是列表的复制，和copy一样都是产生新的两个不影响。<br><img src="https://upload-images.jianshu.io/upload_images/4956968-11d6464709dacc31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="切片的内存变化.png"></p><p>c.直接赋值给赋值一个新的变量，这样是会影响的<br><img src="https://upload-images.jianshu.io/upload_images/4956968-251d996c5518b3f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="直接赋值产生列表.png"><br>7.列表.sort()将列表中的元素从小到大排序，直接修改列表中的顺序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scores=[<span class="number">89</span>,<span class="number">90</span>,<span class="number">45</span>,<span class="number">56</span>,<span class="number">78</span>,<span class="number">98</span>]<span class="comment">#----将元素从小到大排序。</span></span><br><span class="line">scores.sort()</span><br><span class="line">print(scores)</span><br></pre></td></tr></table></figure><p>列表.sort(revers=True),将元素从大到小排序，这句话和socores.sort()在socores.revers()<br>8.排序函数，sorted(序列) 升序 —–排序的方式不一样：不修改原序列，排序后产生一个新的列表，从小到大的排序。<br>               sorted(序列,revers=True)降序——排序的方式不一样：不修改原序列，排序后产生一个新的列表，从大到小的排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">45</span>,<span class="number">7</span>,<span class="number">89</span>,<span class="number">9</span>]</span><br><span class="line">new_nxiao_da=sorted(n)</span><br><span class="line">new_nda_xiao=sorted(n,reverse=<span class="literal">True</span>)</span><br><span class="line">print(new_nda_xiao)</span><br><span class="line">print(new_nxiao_da)</span><br></pre></td></tr></table></figure><p>9.revers(序列)—-将序列中的元素倒序，产生一个迭代器，迭代器只能用遍历来取值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n2=reversed(<span class="string">"abc"</span>)</span><br><span class="line">str2=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> n2:</span><br><span class="line">    str2+=x</span><br><span class="line">print(str2)</span><br></pre></td></tr></table></figure><p>#三.元组<br>1.元组的概念<br>####元组就是不可变的列表，元组是容器类的数据类型，将（）作为容器的标志，里面的元素用逗号隔开。<br>2.元组是不可变，（不支持增删改操作），支持下表操作，有序性。<br>元素可以是任何类型的数据，任何类型数据都可以作为元组。<br>3.查找元素的方法—–和列表一样，元组都是支持的。<br>4.相关的运算–+，==，！=。is<br>也支持in 和 not in ，len ，max ，min ，sum,sorted<br>类型的转换，tuple(数据)—将数据转换成元组，数据必须是序列。</p><p>5.元组特有或者使用频率偏高的操作<br>a.单个数字元素的元组，后面要逗号，不加就是int，字符串要是不加逗号，就是字符串。<br>b.单独使用的元组的值，（）可以省略，—直接多个数据用逗号隔开表示的还是一个元组<br>tuple=10,20,2<br>print(tuple,tuple,tuple)这个就是可以省略的，其他的不行、</p><p>6.可以通过让变量的的个数和元组中的个数保持一致来分别获取元组中的元素。<br>变量1，变量2，变量3=元组,多个变量的赋值。<br>tuple=(121,23,34)<br>x,y,z=tuple<br>#####获取多个元素：同时声明多个变量，获取元组中的元素的时候，可以让变量的个数比这个元组中的少，但是这个时候多个变量中的某一个前面必须加<em>，带</em>的变量可以获取不带*的变量获取完剩下的部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tuple=(<span class="number">12</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">45</span>,<span class="number">56</span>)</span><br><span class="line">x,*y,z=tuple</span><br><span class="line">这个得到的结果是：x=<span class="number">12</span>,z=<span class="number">56</span>,y=[<span class="number">23</span>,<span class="number">34</span>,<span class="number">45</span>]</span><br></pre></td></tr></table></figure><p>#四.数字<br>###1. python 中和数字相关，相关的类型，整型（int），浮点数（float），布尔（bool），复数（complex）<br>####1 整型（int）—所有的整数对应的类型（python2.x)整型除了int还有long）,支持2进制，8进制，16进制的表示方式</p><h4 id="2浮点型（floot）–所有带小数的数对应的类型，支持科学计数法：3e4-310-4"><a href="#2浮点型（floot）–所有带小数的数对应的类型，支持科学计数法：3e4-310-4" class="headerlink" title="2浮点型（floot）–所有带小数的数对应的类型，支持科学计数法：3e4==310*4."></a>2浮点型（floot）–所有带小数的数对应的类型，支持科学计数法：3e4==3<em>10*</em>4.</h4><h4 id="3-bool-只有True-False-相当1-0，数字可以做的这个都可以的"><a href="#3-bool-只有True-False-相当1-0，数字可以做的这个都可以的" class="headerlink" title="3.bool,只有True,False,相当1,0，数字可以做的这个都可以的"></a>3.bool,只有True,False,相当1,0，数字可以做的这个都可以的</h4><p>print(9 &amp; True)<br>####4.复数（complex）,由师部和虚部组成的数就是复数，实部+虚部j,python直接支持复数运算<br>c1=10+2J<br>C2=15-3J#如果虚部是1，不能沈略1,直接支持复数的乘除的运算<br>print(c1+C2)<br>#####5类型的转换</p><ol><li>int（数据）—将制定的数据转换为整型，所有的浮点数和布尔都可以。布尔就是0,1<br>字符串能转整型。—字符串去掉引号后必须是整数,12.5 , 12.0都不行必须是12.<br>2.float()浮点数的转换。将所有的整数转为浮点，就是整数.0 字符串转为浮点，必须是字符串去掉引号，本身就是一个数字。 “2e3”,也是可以的，<br>3.bool()将指定的数据转为布尔值。–所有的数据都能转为布尔值。所有为零为空的值，都转换成false,其他的都是True。<br>那些是false:<br>bool(0.0),bool(“”),bool([]),bool(()),bool((None)),注意字符串里面只有空格也是True.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">if</span> list1:</span><br><span class="line">    print(<span class="string">"list 不为空"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> list1:</span><br><span class="line">    print(<span class="string">"list 为空"</span>)</span><br><span class="line">num = <span class="number">7</span></span><br><span class="line"><span class="keyword">if</span> num &amp; <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">"我是可以打印的"</span>)</span><br></pre></td></tr></table></figure><h6 id="6数学相关的库math提供先关的数学解决方法，和复数相关的操作。"><a href="#6数学相关的库math提供先关的数学解决方法，和复数相关的操作。" class="headerlink" title="6数学相关的库math提供先关的数学解决方法，和复数相关的操作。"></a>6数学相关的库math提供先关的数学解决方法，和复数相关的操作。</h6>math.fabs()绝对值的方法，结果都是浮点型。<br>abs(-10)求绝对值，这个是整型<br>#五 解决循环遍历的问题：<br>![<img src="https://upload-images.jianshu.io/upload_images/4956968-71b7bd23f4e0af46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="遍历取不完产生删不完.png"><br><img src="https://upload-images.jianshu.io/upload_images/4956968-79ed25b868a6c620.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="解决遍历取不完的办法.png"></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#一.列表的相关的操作&lt;br&gt;##1列表的运算：&lt;br&gt;###1数学运算：加法，减法，乘法,除法。&lt;br&gt;1.加法：产生一个新的列表，新的列表中的元素是两个元素的合并。&lt;br&gt;2.乘法运算：列表中的元素重复N次，产生一个新的列表。&lt;br&gt;3.比较运算&lt;br&gt;比较两个列表是否
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>04列表的基础语法</title>
    <link href="http://yoursiteoi.com/2019/12/27/04%E5%88%97%E8%A1%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursiteoi.com/2019/12/27/04%E5%88%97%E8%A1%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2019-12-27T06:10:04.982Z</published>
    <updated>2019-12-27T06:10:05.086Z</updated>
    
    <content type="html"><![CDATA[<p>#一.列表的基础<br>1.以中括号[]作为容器的标志，多个元素，隔开。<br>[元素1，元素2，元素3]<br>2.列表中的元素可以使用任何类型的数据，同一个列表中的数据的类型可以不一样，列表中的元素可以是列表，元组，集合，字典函数 都是可以的。<br>##注意：赋值的语句可以不用放进去。<br>3.容器的特点<br>可变性：元素的个数，元素的值都是可以改变的。<br>有序性：列表是有序的。<br>支持 增 删 改 查 的操作。<br>#二.列表的操作<br>获取列表中的元素：<br>（1）获取单个元素：<br>语法：列表[下标]其中列表可以是列表的值，也可以是保存列表的变量，或者列表结果的表达式。<br>[ ]是固定的写法，下标是元素在列表中的位置。列表中的位置，列表中的元素都会对应一个下标。<br>下标; 从0-列表的长度减去1，但我们使用函数len()获取了列表的长度后，使用range（）函数来遍历的时候，直接就是到长度减一，所以用直接写。<br>末尾就是从负一开始到列表 负的列表的长度。<br>功能就是获取列表中指定的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">print(list1)</span><br><span class="line">print(list1[<span class="number">0</span>])</span><br><span class="line">print(list1[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><p>(2)获取部分元素，切片的结果依然是列表。<br>语法是：<br>列表[开始下标：结束下标：步长]，<br>列表[M:N:step]–获取range(M,N,step)产生的数字序列作为下标对应的所有的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">print(list1[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">print(list1[<span class="number">0</span>:<span class="number">7</span>:<span class="number">2</span>])</span><br><span class="line">print(list1[<span class="number">7</span>:<span class="number">1</span>:<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line">[<span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>###说明：如果步长为正，是从前往后取的，那么开始下标必须在结束下标的前面。如果 步长为负，从后向前取，那么开始下标所在的位置必须在结束下标的后面，否则娶不到。<br>#####写的规则：步长为正数，小的数在前面，步长为负数，大的数在前面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">print(list1[<span class="number">1</span>:<span class="number">5</span>:<span class="number">-1</span>])</span><br><span class="line">print(list1[<span class="number">5</span>:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(list1[<span class="number">-1</span>:<span class="number">-5</span>:<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">[<span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>]</span><br><span class="line">[],[]</span><br></pre></td></tr></table></figure><p>(3)省略下标和步长：<br>a.列表[开始下标：结束]<br>b.列表[:结束下标：步长]    列表[:结束下标]     省略开始下标，步长是正的从前往后，步长为负，从后往前<br>c.列表[开始下标::步长] 列表[开始下标：]  省略结束下标，从该方向取到最后一个元素<br>d.列表[::步长]/列表[ : ]<br>e:[ : ] 这个是复制一个列表<br>####注意：获取单个下标不能越界，但是切片可以越界。<br>（4)遍历列表中的元素一个一个的取出来。<br>a.直接遍历列表<br>for 变量 in 列表：<br>&emsp;循环体<br>b.通过遍历下标来遍历len(列表)，可以获取列表的长度。<br>length=len(列表)<br>for 变量 in range（length）：<br>&emsp;元素=列表[变量]<br>###（2） 增—元素的增加的操作：<br>（1）列表.append(元素)——在指定的列表的末尾添加指定的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">list.append(<span class="number">1</span>)</span><br><span class="line">print(list)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>(2)列表.insert(下标，元素)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">list.insert(<span class="number">2</span>,<span class="string">"插入的元素"</span>)</span><br><span class="line">print(list)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="string">'插入的元素'</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>###( 3)删除元素<br>(1)del 列表[下标]—-删除指定的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"><span class="keyword">del</span> list[<span class="number">0</span>]</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><p>(2)列表.remove(元素)—删除指定的元素。<br>####注意：1.如果列表中的没有这个元素就报错<br>2.如果元素在列表中有多个，只删除他的第一个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list=[<span class="number">1</span>,<span class="string">"我是实验的"</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">list.remove(<span class="string">"我是实验的"</span>)</span><br><span class="line">print(list)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>(3)列表.pop()—–取出列表最后一个（这个方法是从列表中取出这个元素，列表中就不存在了，但是取出来的这个元素可以进行一定的操作）<br>列表.pop(下标)，—-取出列表中指定的元素。<br>##（4）修改元素的值<br>列表[下标]=值 将列表中指定下标对应的元素修改成指定的对应的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">list=[<span class="number">1</span>,<span class="string">"我是实验的"</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">list[<span class="number">1</span>]=<span class="string">"我是修改的"</span></span><br><span class="line">print(list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scores=[<span class="number">89</span>, <span class="number">45</span>, <span class="number">56</span>, <span class="number">20</span>, <span class="number">90</span>, <span class="number">78</span>, <span class="number">60</span>, <span class="number">23</span>, <span class="number">87</span>, <span class="number">20</span>, <span class="number">50</span>]</span><br><span class="line">legth=len(scores)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(legth):</span><br><span class="line">    <span class="keyword">if</span> scores[i]&lt;<span class="number">60</span>:</span><br><span class="line">       scores[i]=<span class="string">"不及格"</span></span><br><span class="line">print(scores)</span><br></pre></td></tr></table></figure><p>##注意在使用for 循环进行列表的遍历的时候，如果对原列表进行了增加或者删除的操作的时候，那么他的原列表的顺序是会变化的，下标变化了，可能导致数的溢出，最好的方法是copy一个列表，遍历的时候对复制的列表进行，要执行增删等改变其位置的操作的时候对原列表进行。<br>下面这个如果对先列表就是不正确的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scores=[<span class="number">89</span>, <span class="number">45</span>, <span class="number">56</span>, <span class="number">20</span>, <span class="number">90</span>, <span class="number">78</span>, <span class="number">60</span>, <span class="number">23</span>, <span class="number">87</span>, <span class="number">20</span>, <span class="number">50</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> scores:</span><br><span class="line">  <span class="keyword">if</span> i&lt;<span class="number">60</span>:</span><br><span class="line">scores.remove(i)</span><br><span class="line">print(scores)</span><br></pre></td></tr></table></figure><p>##上面的就会导致结果不正确，正确的做法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scores=[<span class="number">89</span>, <span class="number">45</span>, <span class="number">56</span>, <span class="number">20</span>, <span class="number">90</span>, <span class="number">78</span>, <span class="number">60</span>, <span class="number">23</span>, <span class="number">87</span>, <span class="number">20</span>, <span class="number">50</span>]</span><br><span class="line">c=scores[:]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line"><span class="keyword">if</span> i&lt;<span class="number">60</span>:</span><br><span class="line">  scores.remove(i)</span><br><span class="line">print(scores)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#一.列表的基础&lt;br&gt;1.以中括号[]作为容器的标志，多个元素，隔开。&lt;br&gt;[元素1，元素2，元素3]&lt;br&gt;2.列表中的元素可以使用任何类型的数据，同一个列表中的数据的类型可以不一样，列表中的元素可以是列表，元组，集合，字典函数 都是可以的。&lt;br&gt;##注意：赋值的语
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>03分支结构-for循环-while-循环</title>
    <link href="http://yoursiteoi.com/2019/12/27/03%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84-for%E5%BE%AA%E7%8E%AF-while-%E5%BE%AA%E7%8E%AF/"/>
    <id>http://yoursiteoi.com/2019/12/27/03%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84-for%E5%BE%AA%E7%8E%AF-while-%E5%BE%AA%E7%8E%AF/</id>
    <published>2019-12-27T06:08:35.284Z</published>
    <updated>2019-12-27T06:08:35.393Z</updated>
    
    <content type="html"><![CDATA[<p>#一、if elif else 结构<br>##如何使用：<br>（1）语法：<br>if  条件语句：<br>  &emsp;代码段<br>elif 条件语句2：<br>  &emsp;代码段2<br>elif 条件语句3：<br>  &emsp;代码段3<br>…….<br>else:<br>  &emsp;代码段  N<br>（2）先判断条件语句1 是否成立，成立就执行1 ，然后整个 if elif else 结构就结束了。如果第一个不成立，就接着判断第二个吧，如果第二个成立，就执行第二个，<br>     如果第二个条件语句二不成立，接判断第三个，以此类推，如果都不成立，就执行else.<br>（3）if 嵌套<br>if 结构中扥代码块中的可以出现其他的if 语句.<br>题目：判断一个数是否是偶数，并且在判断这个数是否是4的倍数，并且打印出结论。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">num=<span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> num&amp;<span class="number">1</span>==<span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"偶数"</span>)</span><br><span class="line">        <span class="keyword">if</span> num % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"woshi4 de bieshu "</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"我是奇数"</span>)</span><br><span class="line">    <span class="keyword">if</span> num%<span class="number">10</span>==<span class="number">3</span>:</span><br><span class="line">        print(<span class="string">"个位数是三"</span>)</span><br><span class="line"></span><br><span class="line">age=int(input(<span class="string">"请输入你的年纪： "</span>))</span><br><span class="line"><span class="keyword">if</span> age &lt;=<span class="number">14</span>:</span><br><span class="line">    print(<span class="string">"我是少年"</span>)</span><br><span class="line"><span class="keyword">elif</span> age&lt;=<span class="number">25</span>:</span><br><span class="line">    print(<span class="string">"青年"</span>)</span><br><span class="line"><span class="keyword">elif</span> age&lt;=<span class="number">35</span>:</span><br><span class="line">    print(<span class="string">"壮年"</span>)</span><br><span class="line"><span class="keyword">elif</span> age&lt;=<span class="number">50</span>:</span><br><span class="line">    print(<span class="string">"我是中年"</span>)</span><br><span class="line"><span class="keyword">elif</span> age&lt;=<span class="number">120</span>:</span><br><span class="line">    print(<span class="string">"老年人"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> age&gt;<span class="number">120</span>:</span><br><span class="line">        print(<span class="string">"你是神仙啊  活这么久！"</span>)</span><br></pre></td></tr></table></figure><p>#二.for 循环<br>（1）循环的结构：<br>  ( 2 )语法：<br>            for 变量 in 序列（容器性数据）：<br>              循环体<br>说明：<br>for 关键字  固定写法<br>变量名–和声明变量的要求是一样的。<br>in—–关键字  固定写法<br>序列—容器性数据：字符串，列表，字典，元组，集合，迭代器，生成器,range.<br>：  —–固定的写法。<br>循环体：–和For保持一个缩进的一条或多条语句，：需要重复执行的语句。<br>##执行的过程：<br>  <strong><strong>***</strong></strong> 让变量去序列中取值，一个一个的取，取完为止，每取一个值，执行一次循环体。<br>( 2 )range 函数：是为了让for 循环更加方便控制。<br>  range(N)：<br>  括号里跟个正整数，产生0–N-1个数。一共是N个,range(0,4)—0,1,2,3<br>range(M,N)：<br>  产生M–N-1个数字的序列。range(1,8),—-1,2,3,4,5,6,7,7<br>range(M,N,step)：<br>  –充M到N-1，间隔是Sep 的数字。range(2,8,2),—-2,4,6<br>(3)range 步长是-1<br>for x in range(10,1,-1):<br>    &emsp;print(x)<br>range()函数的作用：<br>1.产生指定的数字的序列。<br>2。控制循环的次数<br>3.如果循环体中，用不到这个变量，可以直接用 下划线给变量命名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">"qwerR"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span>(name):</span><br><span class="line">    print(<span class="string">"我来打印"</span>,i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">8</span>,<span class="number">2</span>):</span><br><span class="line">    print(i)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>,<span class="number">10</span>):</span><br><span class="line">    print(x)</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">    print(y)</span><br><span class="line">································································</span><br><span class="line">循环中没有使用到取出来的变量的值，用下划线来命名。</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    print(<span class="string">"======================"</span>)</span><br><span class="line">·································································</span><br><span class="line">统计<span class="number">0</span><span class="number">-100</span>中所有能被三整除的数</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">101</span>):</span><br><span class="line">    <span class="keyword">if</span> n%<span class="number">3</span>==<span class="number">0</span>:</span><br><span class="line">        print(n)</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">101</span>,<span class="number">3</span>):</span><br><span class="line">    print(n)</span><br><span class="line"><span class="number">2.</span>统计一到一百能被四整除，并且个位数是<span class="number">2</span>：</span><br><span class="line">k=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    <span class="keyword">if</span> s%<span class="number">4</span>==<span class="number">0</span> <span class="keyword">and</span> s%<span class="number">10</span>==<span class="number">2</span>:</span><br><span class="line">        k+=<span class="number">1</span></span><br><span class="line">print(k)</span><br><span class="line">计算<span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>+。。。。。。<span class="number">100</span>:求和</span><br><span class="line">sum=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    sum+= f</span><br><span class="line">print(f)</span><br></pre></td></tr></table></figure><p>#三while 循环<br>##（1）语法：<br>while 条件语句：<br>  循环体<br>##（2）while:关键字  固定写法<br>  &emsp;条件语句–任何有结果的表达式都是可以的：数据，已经声明过的表达，运算表达式（不能是运算表达式。）<br>##( 3 ) :固定写法<br>##（4）循环体——和while 保持一个缩进的一条或者多天语句（需要重复执行的语句）<br>##（5）执行的过程：<br>&emsp; 先判断条件语句是否是True,如果是就执行循环体，执行完在判断是否是True,再执行，以此类推，直到条件语句的结果是False,就结束循环.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> num&lt;<span class="number">5</span>:</span><br><span class="line">    print(<span class="string">"-----"</span>)</span><br><span class="line">    num+=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>##(6)for 循环和while 循环的选择的问题<br> （1）什么时候用for 循环：<br>&emsp;1.循环次数确定的时候，<br>2.遍历序列<br>（2）什么时候用while循环<br>&emsp;1,死循环的时候<br>&emsp;2.循环的次数不确定的时候。<br>( 3 )循环的的关键字，continue<br>只能出现在循环里面，continue是循环里的关键字。<br>##作用：<br>###当执行循环体的时候，如果遇到continue 那么当次循环直接结束，直接进入下次循环的判断。<br> continue这个关键值的下面的就不会执行了。<br>###当执行循环体的时候，如果遇到break,所有的程序直接结束。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">nu=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> nu!= <span class="number">0</span>:</span><br><span class="line">    nu = int(input(<span class="string">"输入数字;"</span>))</span><br><span class="line">    <span class="keyword">if</span> nu==<span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"你输入对了 ！！！"</span>)</span><br><span class="line"><span class="comment"># 猜数字游戏，游戏开始的时候随机产生一个数字不断输入数字，直到输入的数字和产生的数字一致就结束了游戏，</span></span><br><span class="line"><span class="comment"># 如果没有你猜对的时候，给出大了，小了的提示。</span></span><br><span class="line">num3=randint(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">guss=int(input(<span class="string">"请输入你要猜的数字："</span>))</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> guss&lt;num3:</span><br><span class="line">        print(<span class="string">"你输入的小了"</span>)</span><br><span class="line">    <span class="keyword">elif</span> guss&gt;num3:</span><br><span class="line">        print(<span class="string">"你输入的太大了"</span>)</span><br><span class="line">    guss=int(input(<span class="string">"请输入你要猜的数字："</span>))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"我对了"</span>,guss,num3)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sum3=<span class="number">0</span></span><br><span class="line">不断输入的数字，直到为<span class="number">0</span> 为止，然后将所有的奇数相加</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    value3 = int(input(<span class="string">"请输入开机密码 ："</span>))</span><br><span class="line">    <span class="keyword">if</span> value3==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> value3%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    sum3 +=value3</span><br><span class="line">print(sum3)</span><br></pre></td></tr></table></figure><h4 id="else-在-循环中-else-是循环是自然结束（for-循环取值取完了-while循环不满足条件-）才会执行的。-break-是不会执行的。"><a href="#else-在-循环中-else-是循环是自然结束（for-循环取值取完了-while循环不满足条件-）才会执行的。-break-是不会执行的。" class="headerlink" title="else:在 循环中 else  是循环是自然结束（for 循环取值取完了  while循环不满足条件 ）才会执行的。 break 是不会执行的。"></a>else:在 循环中 else  是循环是自然结束（for 循环取值取完了  while循环不满足条件 ）才会执行的。 break 是不会执行的。</h4><p>##（7）完整的 for 循环 和while 循环<br>1.完整的 for 循环<br>for 变量 in 序列：<br>    循环体<br>else:<br>    代码段<br>2.完整的 while 循环<br>while 条件语句：：<br>    循环体<br>else:<br>    代码段<br>######else 中的代码段： 当循环自然死亡（for 后的值取完了，while 后面的条件为false）else 后面的代码段会在循环结束后执行，如果循环是因为遇到break而结束的那么else后面的代码段就不会执行。<br>######else的意思：可以通过判断else的代码段有没有执行来判断循环有没有遇到break。<br>##(8)while 循环的用法<br>while True:<br>    需要重复执行的代码<br>    if 退出循环的条件：<br>        &emsp;&emsp;break<br>##(9)循环的嵌套<br>外面执行一次，里面要执行完<br>####计算1！+2！+3！+4！……..10!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">num=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">   num2=<span class="number">1</span></span><br><span class="line">   <span class="keyword">for</span> i2 <span class="keyword">in</span> range(<span class="number">1</span>,i2<span class="number">-1</span>):</span><br><span class="line">      num2*=i2</span><br><span class="line">   num0+=num2</span><br><span class="line">print(num0)</span><br></pre></td></tr></table></figure><p>嵌套的尤为重要，逻辑的思维是很重要的。<br>###补充：python中交换两个变量的方法是：<br>###a,b=b,a</p><p>###注意：如果在for，while 循环中，遇到break,就不会执行else中的代码。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#一、if elif else 结构&lt;br&gt;##如何使用：&lt;br&gt;（1）语法：&lt;br&gt;if  条件语句：&lt;br&gt;  &amp;emsp;代码段&lt;br&gt;elif 条件语句2：&lt;br&gt;  &amp;emsp;代码段2&lt;br&gt;elif 条件语句3：&lt;br&gt;  &amp;emsp;代码段3&lt;br&gt;…….&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>02变量、运算符、位运算、分支结构</title>
    <link href="http://yoursiteoi.com/2019/12/27/02%E5%8F%98%E9%87%8F%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E4%BD%8D%E8%BF%90%E7%AE%97%E3%80%81%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursiteoi.com/2019/12/27/02%E5%8F%98%E9%87%8F%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E4%BD%8D%E8%BF%90%E7%AE%97%E3%80%81%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/</id>
    <published>2019-12-27T05:28:23.523Z</published>
    <updated>2019-12-27T05:30:21.409Z</updated>
    
    <content type="html"><![CDATA[<p>#一.变量<br>##1变量是什么？<br>&emsp;变量申请空间，保存数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age=<span class="number">50</span></span><br><span class="line">print(<span class="string">"我的年纪是多少："</span>,age)</span><br><span class="line"><span class="keyword">if</span> age&lt;<span class="number">18</span>:</span><br><span class="line">    print(<span class="string">"未成年"</span>)</span><br></pre></td></tr></table></figure><p>##2.声明变量的语法：<br>变量名=值<br>变量名是程序员自己命名的：<br>要求：<br>####1.必须是标识符<br>####2.不能是关键字<br>规范：<br>见名知意，命名用英文，满足PEP8命名的规范，多个单词用下划线隔开，不要用系统的类名，函数名，库名等变量命名。<br>=表示赋值：右边的值赋给坐标。<br>值：任何有结果的表达式，例如：数据，已经声明过的变量，运算表达式等。。。<br>##注意声明过的变量使用的是它的值<br>(1)同时声明多个变量赋相同的值<br>变量名1=变量2=变量3=4<br>（2）同时声明多个变量赋不同的值<br> 变量01，变量02，变量03=值1，值2，值3<br>##3python声明变量的原理</p><p> java 是根据值得类型的范围，值得范围来找内存，静态的空间不变。 python 是根据值得类型的大小来找适合的内存空间，动态变化的python 先开辟空间存储数据（存储的这个数据需要多大的饿内存就开辟多少内存空间）</p><h1 id="然后再将变量和这个数据对应的内存的空间关联在一起"><a href="#然后再将变量和这个数据对应的内存的空间关联在一起" class="headerlink" title="然后再将变量和这个数据对应的内存的空间关联在一起"></a>然后再将变量和这个数据对应的内存的空间关联在一起</h1><p>##4.变量的三要素：<br>类型 type<br>值  直接使用<br>内存地址使用id( )函数（ 和他关联的数据，在内存中的地址也是变量中真正存的数据）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">10</span></span><br><span class="line">print(a,type(a),id(a))</span><br><span class="line">a=<span class="number">30</span></span><br><span class="line">print(a,type(a),id(a))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10 &lt;class 'int'&gt; 8791401919008</span></span><br><span class="line"><span class="comment"># 30 &lt;class 'int'&gt; 8791401919648</span></span><br></pre></td></tr></table></figure><p>python中用一个变量给另一个变量赋值的时候，是将原来的地址赋值给,另一个，赋值完后，数据只有一个，地址也是一个，标签是两个.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b=a</span><br><span class="line">print(id(a),id(b))</span><br></pre></td></tr></table></figure><p>#二.运算符<br>python,支持的位运算：数学运算符，比较运算符，逻辑运算符,赋值运算符,<br>计算机中的除法是/<br>%取余数，也叫作求模，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">5</span>%<span class="number">2</span>)</span><br><span class="line">上面的余数是<span class="number">1</span></span><br></pre></td></tr></table></figure><p>2.余数在程序中的应用：<br>                     1.判断整数的奇数偶数、对2取余余数是零。奇数余数是1，偶数是0<br>2.是否整除–判断余数是否为0.<br>3.取低位数：例如取一个数个位数是什么：对10取余就知道个位数是多少了<br>a=148<br>想要知道个位数，对10取余<br>print(148%10)<br>想知道十位对一百取余：<br>print(148%100)<br>**幂的运算，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">16</span>**(<span class="number">1</span>/<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>这个表示16开平方的到的数是多少。<br>##3.比较运算符&gt;,&lt;==,!=,&gt;=,&lt;=<br>###所有的比较的运算符的结果呢都是布尔值。<br>判断两个值是否相等  用== 不相等 用  ！=</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="number">10</span>==<span class="number">10</span>),<span class="literal">True</span></span><br><span class="line">print(<span class="number">10</span>!=<span class="number">10</span>),<span class="literal">False</span></span><br></pre></td></tr></table></figure><p>##4.逻辑运算符<br>and  与  or 或  not 非<br>and  两个是真 只要有一个是假就是假<br>or    有真就是真，两个都是假就是假<br>not   真变成假  假变成真<br>注意：<br>短路操作：针对与运算和或运算<br>and的短路操作：条件1 and  条件  2  就是两个条件  前面的那个条件如果是False，那么后面的不会执行，结果是False<br>or 的短路操作：如果OR前面的是True,那么后面的条件不会被执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(number)</span>:</span></span><br><span class="line">    print(<span class="string">"函数被执行了"</span>,number )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="literal">False</span> <span class="keyword">and</span> func1(<span class="number">1</span>)<span class="comment">#这个不会被执行</span></span><br><span class="line"><span class="literal">True</span>  <span class="keyword">and</span>  func1(<span class="number">2</span>)<span class="comment">#这个会执行</span></span><br><span class="line"><span class="literal">False</span> <span class="keyword">or</span> func1(<span class="number">1</span>)<span class="comment">#这个会被执行</span></span><br><span class="line"><span class="literal">True</span>  <span class="keyword">or</span>  func1(<span class="number">2</span>)<span class="comment">#这个不会执行</span></span><br></pre></td></tr></table></figure><p>##5赋值运算符：<br>=，+=，-=，<em>=，/=,%=,//=,*</em>=<br>###所有的赋值运算符的左边必须是变量，组合的赋值运算符左边除了是变量，这个变量还必须是声明过的。<br>（1）<br>变量=数据，就是将左边的值赋给右边的变量。<br>（2）组合的赋值运算符：<br>变量+= 值——-变量加值，变量=变量+值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aa+=<span class="number">10</span>NameError: name <span class="string">'aa'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p>##(6)运算符的顺序：<br>数学运算&gt;比较运算符&gt;逻辑运算符&gt;赋值运算符<br>数学运算的优先级和数学一样：** &gt; * &gt; / &gt; // &gt; % &gt; + &gt; -,如果有括号先算括号里的。</p><p>#三.位运算<br>所有的位运算都是针对数字的补码进行操作的：特点就是快速。<br>位运算：&amp;（与），|（或），~（取反），^(异或)，&lt;&lt;(左移),&gt;&gt;(右移)<br>（1）(&amp;)与运算：运算的规则：补码的每一位上的数都是1结果就是1，有0就是0<br>1110&amp;0111 = 0110<br>a=3&amp;2<br>print(3&amp;2)<br>3的补码：00000011<br>2的补码：00000010<br>00000011 &amp;00000010 = 00000010===2<br>b=-7&amp;3<br>-7 的补码：10000111（原）—-11111001（补码）<br>3的补码：00000011<br>-7&amp;3 =00000001==1<br>应用：高效的判断数字的基偶性<br>##<strong>**</strong>让数字和1进行按位与运算，判断结果是0（偶数）还是1（奇数）<br>判断奇偶数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">7</span>&amp;<span class="number">1</span>,<span class="number">9</span>&amp;<span class="number">1</span>,<span class="number">5</span>&amp;<span class="number">1</span>)</span><br><span class="line">print(<span class="number">2</span>&amp;<span class="number">1</span>,<span class="number">4</span>&amp;<span class="number">1</span>,<span class="number">6</span>&amp;<span class="number">1</span>,<span class="number">8</span>&amp;<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>（2）或 | 运算：运算规则：每一位上的数如果都是你0就是0，有1就是1<br>1110|0111 = 1111<br>print(3|2)<br>-7|3<br>11111001|00000001<br>（3）取反~<br>将每一位的0变成1,1变成0.<br>~1101-0010<br>（4）异或 ^:每一位上的数相同是零  不同为1<br>1101^0010 ==01001<br>（5）左移，右移 &lt;&lt;  ,&gt;&gt;<br>数字《 N》—指定的数字的补码向左移动N位，计算数字乘以<em>2*</em>n<br>m=数字<br>n=移动多少位<br>表示的是m<em>2*</em>n<br>右移：<br>数字《 N》—指定的数字的补码向右移动n位，计算数字除以以<em>2*</em>n<br>m=数字<br>n=移动多少位<br>表示的是m/2**n(取整数)<br>print(2&lt;&lt;1)<br>print(2&gt;&gt;1)<br>print(-9&gt;&gt;2) #负数往小的取。除不尽，再减一。这个除不尽 所以不是负二点几  是负三。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#一.变量&lt;br&gt;##1变量是什么？&lt;br&gt;&amp;emsp;变量申请空间，保存数据&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/spa
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>01python基础语法和进制</title>
    <link href="http://yoursiteoi.com/2019/12/27/01python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%92%8C%E8%BF%9B%E5%88%B6/"/>
    <id>http://yoursiteoi.com/2019/12/27/01python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%92%8C%E8%BF%9B%E5%88%B6/</id>
    <published>2019-12-27T05:20:30.958Z</published>
    <updated>2019-12-27T05:20:31.078Z</updated>
    
    <content type="html"><![CDATA[<p>#一.环境和快捷键语法常识<br>##1.虚拟环境和控制器<br>虚拟的环境可以根据自己的需要设定，大大的节省资源。<br><img src="https://upload-images.jianshu.io/upload_images/4956968-16924f9a16f6faa3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建环境.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/4956968-9cecfa00cf7a162a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="控制台.png"></p><p>虚拟环境的管理：把虚拟的环境放到一个文件夹下<br>控制台的第一行告诉我们解释器在哪里<br><strong>Process finished with exit code 0</strong> 程序结束标志<br><strong>code 0</strong>表示程序正常  ，<strong>1</strong> 表示错误<br>#二.基础的语法<br>##1.快捷键<br>| 按键            | 功能             |<br>| ————- | ————– |<br>| Ctrl +/       | 注释和取消          |<br>| Ctrl +s       | 保存文件           |<br>| Ctrl +c       | 拷贝文件           |<br>| Ctrl +v       | 粘贴文件           |<br>| Ctrl +x       | 剪切文件           |<br>| Ctrl +z       | 撤销操作           |<br>| Ctrl +shift+z | 反撤销            |<br>| Ctrl +f       | 搜索             |<br>| Ctrl +r       | 替换             |<br>| Ctrl +a       | 全选             |<br>| alt           | 可以同时出现多个光标进行操作 |<br>##2注释<br>######1单行注释：<br>就是在文字前面加 <strong>#</strong><br>    代码中不影响编译执行的文字，不影响程序功能的文字<br>    对代码进行说明。<br>    写注释是一个好的编程的习惯<br>######2多行注释<br>python中的多行的注释加<strong>三个单引号三个双引号</strong>之间<br>##3语句<br>语句是指一行一行的代码，一条语句占一行。<br>所有的符号必须是英文状态下<br>如果一行语句想要写多条语句，必须在语句和语句之间加<strong>分号</strong><br>##4缩进<br>python中一条语句的开头，不能随便加缩进 IndentationError 缩进的错误<br>不能随便加空格或者tab<br>需要缩进必须加缩进<br>##5标识符<br>标识专门用来给函数或者是类用来命名的<br>   标识符的要求：<br>        由字母数字下划线组成，<br>        数字不能开头<br>        其实汉字，日语，韩语也可以作为标识符，<br>        但是不能这么做。<br>##6.关键字<br>在python中本身有特殊意义或者功能的标识符又叫保留字。如and,if,while,等、<br>查看关键字：<br>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyworld</span><br><span class="line">print(keyword.kwlist)</span><br></pre></td></tr></table></figure><br>##7.数据的类型<br> 常用的数据：<br>数字数据：<br>&emsp;在程序中直接写就行了，表示数字的大小。。2e3我乘10的三次方（科学计数法)2+5j(复数)<br>文本数据：<br>    &emsp;文本信息交字符串，需要用双单引号引起来有些数据看起来是数字其实是文本。<br>布尔数据：<br>    &emsp;用True表示真或者是肯定，用Flase,表示假或者否定。<br>其他的数据的类型：<br>    &emsp;列表(list),字典（dict）,元组(tuple),迭代器（iter）,字节（bytes）,生成器，函数（function）<br>##8.输入函数和输出函数：<br>&emsp;输入函数是input(),输出函数又叫打印函数叫做print().<br>######1print()函数：<br>&emsp;输出函数，print()打印内容以及表达式的结果。<br>&emsp;如果多个表达式的打印需要用逗号分隔开来。<br>&emsp;print()函数可以定制打印的末尾的符号和分隔符号，他们默认是间隔是空格。print(“打印的内容”，end=”“末尾的符号”，sep=”分隔的符号”)<br>######2.input()函数：<br>变量=input(“这个加提示信息:”)<br>用变量去获取从控制台输入的内容不管的是什么，都是字符串。<br>#三.进制<br>##1进制基础<br><img src="https://upload-images.jianshu.io/upload_images/4956968-85d5c88fa307429f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="二进制取余.png"></p><p>数字在编程中有四种形式的存在：十进制，二进制，八进制，十六进制。<br>| 进制   | 基数      | 进位    | 位权                   | 表示方式 |<br>| —- | ——- | —– | ——————– | —- |<br>| 十进制  | 0-9     | 逢十进一  | 从低位开始几进制就是几次幂再和每个位相乘 | 直接写  |<br>| 二进制  | 0-1     | 逢二进一  | 从低次幂开始每个位上的相乘        | 0b   |<br>| 八进制  | 0-7     | 逢八进一  | 从低位开始几进制就是几次幂再和每个位相乘 | 0o   |<br>| 十六进制 | 0-9，a-f | 逢十六进一 | 从低次幂开始每个位上的相乘        | 0x   |<br>##2.手动换算进制<br>1.十进制转为其他的进制：<br>&emsp;转为几进制，就除以多少，取余数。<br>2.其他进制转为十进制：<br>&emsp;<strong>位权</strong>乘以相应位置上的<strong>基数</strong>，再求和<br>3.二进制转为八进制和十六进制的转换：<br>&emsp;11010112（2）—–133（8）（三位取一位421）<br>&emsp;11010112（2）—–5b（16）(四位取一位8421)<br>&emsp;0o76(8)—————111110（2）<br>&emsp;a3(16)——–10100011(2)<br>&emsp;a3(16)——-10100011(2)——-243(8)<br>&emsp;十六进制转为八进制，先转为二进制再转八进制。<br>##3.程序进制的转换<br>&emsp;二进制函数bin()<br>&emsp;八进制函数oct()<br>&emsp;十六进制函数hex()</p><p>##4.原码反码和补码<br>注：<strong>计算机在底层存储的数据只能存数字，并且存的是数字的补码</strong>。<br>######1.原码<br><strong>原码=符号位+数字对应的二进制的位（符号位是用1表示负数0表示正数）加到它的</strong>最高位<strong>上。</strong><br>10(10)——1010(2)<br>10(10)—————–00001010(十的二进制的原码)<br>-10（10）———–10001010(负10的二进制的原码)<br>为什么是八位数？<br>&emsp;<strong>答：在程序中使用内存的最小的单位就是八位</strong></p><p><strong>1bytes(字节)=8bit(位) 1kb(k)=1024bytes<br>1mb=1024kb   1G=1024M  1T=1024G</strong><br>####注意：正数的原码，反码，补码是一样的，都是原码。<br>######2.反码<br>反码就是原码的符号位不变，其他的全部取反。<br>10的原码：00001010<br>-10:10001010—-反码：1111 0101<br>10：0000 1010—-反码：0111  0101<br>######3.补码<br>&emsp;反码加一就是补码：<br>&emsp;-10（10）—1000  1010—–反码 1111<br> 0101 —–补码就是加一 ——– 1111  0110（补码）<br>##注意：为什么要用补码：<br>&emsp;<strong>为什么存补码：计算机只有加法器  只能进行加运算。</strong><br>&emsp;<strong>涉及到负数的运算，原码不能正确的运算，只能用补码</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#一.环境和快捷键语法常识&lt;br&gt;##1.虚拟环境和控制器&lt;br&gt;虚拟的环境可以根据自己的需要设定，大大的节省资源。&lt;br&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4956968-16924f9a16
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
